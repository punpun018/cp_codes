const int NN = 2e5 + 5;
const int Log = 20;
vector<vector<int>> adj(NN);
vector<vector<int>> up(NN, vector<int>(Log, -1));

// objective: calculate dep and up[x][0]
void dfs(int cur, int par, vector<int> &dep)
{
    up[cur][0] = par;
    for (auto child : adj[cur])
    {
        if (child != par)
        {
            dep[child] = dep[cur] + 1;
            dfs(child, cur, dep);
        }
    }
}

// objective: calculate up[x][all]
void precomp(int n)
{
    for (int i = 1; i < Log; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            int temp = up[j][i - 1];
            if (temp != -1)
                up[j][i] = up[temp][i - 1];
        }
    }
}

// objective: binary jumping
int lift(int cur, int jmp)
{
    for (int i = 0; i < Log; i++)
    {
        if ((jmp >> i) & 1)
        {
            if (cur == -1)
                break;
            cur = up[cur][i];
        }
    }
    return cur;
}

// objective: finding lca using binary jumps
int lca(int u, int v, vector<int> &dep)
{
    if (dep[u] < dep[v])
        swap(u, v);
    u = lift(u, dep[u] - dep[v]);
    if (u == v)
        return u;
    for (int i = Log - 1; i >= 0; i--)
    {
        if (up[u][i] != up[v][i])
        {
            u = up[u][i];
            v = up[v][i];
        }
    }
    return up[u][0];
}
