    class SparseTable {
        vector<vector<int>> st_min, st_max;
        vector<int> log;
        int n;

    public:
        SparseTable(const vector<int>& arr) {
            n = arr.size();
            int maxLog = 32 - __builtin_clz(n);
            st_min.assign(n, vector<int>(maxLog));
            st_max.assign(n, vector<int>(maxLog));
            log.resize(n + 1);

            log[1] = 0;
            for (int i = 2; i <= n; i++)
                log[i] = log[i / 2] + 1;

            for (int i = 0; i < n; i++) {
                st_min[i][0] = arr[i];
                st_max[i][0] = arr[i];
            }

            for (int j = 1; (1 << j) <= n; j++) {
                for (int i = 0; i + (1 << j) <= n; i++) {
                    st_min[i][j] = min(st_min[i][j - 1], st_min[i + (1 << (j - 1))][j - 1]);
                    st_max[i][j] = max(st_max[i][j - 1], st_max[i + (1 << (j - 1))][j - 1]);
                }
            }
        }

        int queryMin(int l, int r) {
            int j = log[r - l + 1];
            return min(st_min[l][j], st_min[r - (1 << j) + 1][j]);
        }

        int queryMax(int l, int r) {
            int j = log[r - l + 1];
            return max(st_max[l][j], st_max[r - (1 << j) + 1][j]);
        }
    };
