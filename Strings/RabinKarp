struct Hash
{
    const int MOD = 1e9 + 7;
    const int BASE1 = 5689;
    const int BASE2 = 8861;

    vector<pair<int, int>> hashes, Pow;
    string text;

    Hash(string s) : text(s)
    {
        int n = s.size();
        hashes.assign(n + 1, {0, 0});
        Pow.assign(n + 1, {1, 1});

        for (int i = 0; i < n; i++)
        {
            hashes[i + 1] = {
                (1LL * hashes[i].first * BASE1 + (s[i] - 'a' + 1)) % MOD,
                (1LL * hashes[i].second * BASE2 + (s[i] - 'a' + 1)) % MOD
            };

            Pow[i + 1] = {
                (1LL * Pow[i].first * BASE1) % MOD,
                (1LL * Pow[i].second * BASE2) % MOD
            };
        }
    }

    pair<int, int> get(int l, int r)
    {
        l++, r++;
        int hash1 = (hashes[r].first - (1LL * hashes[l - 1].first * Pow[r - l + 1].first) % MOD + MOD) % MOD;
        int hash2 = (hashes[r].second - (1LL * hashes[l - 1].second * Pow[r - l + 1].second) % MOD + MOD) % MOD;
        return {hash1, hash2};
    }
                     
    vector<int> find_occurrences(const string &pattern)
    {
        int m = pattern.size();
        if (m > text.size()) return {};

        pair<int, int> patternHash = {0, 0};
        for (char c : pattern)
        {
            patternHash.first = (1LL * patternHash.first * BASE1 + (c - 'a' + 1)) % MOD;
            patternHash.second = (1LL * patternHash.second * BASE2 + (c - 'a' + 1)) % MOD;
        }

        vector<int> positions;
        for (int i = 0; i + m <= text.size(); i++)
        {
            if (get(i, i + m - 1) == patternHash)
                positions.push_back(i); 
        }

        return positions;
    }
};

//simple sliding window approach using rolling hash
                     
